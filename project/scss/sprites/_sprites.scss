// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$address-book-name: 'address-book';
$address-book-x: 46px;
$address-book-y: 0px;
$address-book-offset-x: -46px;
$address-book-offset-y: 0px;
$address-book-width: 32px;
$address-book-height: 32px;
$address-book-total-width: 116px;
$address-book-total-height: 70px;
$address-book-image: '../images/sprite-out/spritesheet.png';
$address-book: (46px, 0px, -46px, 0px, 32px, 32px, 116px, 70px, '../images/sprite-out/spritesheet.png', 'address-book', );
$barcode-name: 'barcode';
$barcode-x: 0px;
$barcode-y: 38px;
$barcode-offset-x: 0px;
$barcode-offset-y: -38px;
$barcode-width: 32px;
$barcode-height: 32px;
$barcode-total-width: 116px;
$barcode-total-height: 70px;
$barcode-image: '../images/sprite-out/spritesheet.png';
$barcode: (0px, 38px, 0px, -38px, 32px, 32px, 116px, 70px, '../images/sprite-out/spritesheet.png', 'barcode', );
$envelop-name: 'envelop';
$envelop-x: 38px;
$envelop-y: 38px;
$envelop-offset-x: -38px;
$envelop-offset-y: -38px;
$envelop-width: 32px;
$envelop-height: 32px;
$envelop-total-width: 116px;
$envelop-total-height: 70px;
$envelop-image: '../images/sprite-out/spritesheet.png';
$envelop: (38px, 38px, -38px, -38px, 32px, 32px, 116px, 70px, '../images/sprite-out/spritesheet.png', 'envelop', );
$file-play-name: 'file-play';
$file-play-x: 84px;
$file-play-y: 0px;
$file-play-offset-x: -84px;
$file-play-offset-y: 0px;
$file-play-width: 32px;
$file-play-height: 32px;
$file-play-total-width: 116px;
$file-play-total-height: 70px;
$file-play-image: '../images/sprite-out/spritesheet.png';
$file-play: (84px, 0px, -84px, 0px, 32px, 32px, 116px, 70px, '../images/sprite-out/spritesheet.png', 'file-play', );
$price-tags-name: 'price-tags';
$price-tags-x: 0px;
$price-tags-y: 0px;
$price-tags-offset-x: 0px;
$price-tags-offset-y: 0px;
$price-tags-width: 40px;
$price-tags-height: 32px;
$price-tags-total-width: 116px;
$price-tags-total-height: 70px;
$price-tags-image: '../images/sprite-out/spritesheet.png';
$price-tags: (0px, 0px, 0px, 0px, 40px, 32px, 116px, 70px, '../images/sprite-out/spritesheet.png', 'price-tags', );
$address-book-2x-name: 'address-book-2x';
$address-book-2x-x: 92px;
$address-book-2x-y: 0px;
$address-book-2x-offset-x: -92px;
$address-book-2x-offset-y: 0px;
$address-book-2x-width: 64px;
$address-book-2x-height: 64px;
$address-book-2x-total-width: 232px;
$address-book-2x-total-height: 140px;
$address-book-2x-image: '../images/sprite-out/spritesheet-2x.png';
$address-book-2x: (92px, 0px, -92px, 0px, 64px, 64px, 232px, 140px, '../images/sprite-out/spritesheet-2x.png', 'address-book-2x', );
$barcode-2x-name: 'barcode-2x';
$barcode-2x-x: 0px;
$barcode-2x-y: 76px;
$barcode-2x-offset-x: 0px;
$barcode-2x-offset-y: -76px;
$barcode-2x-width: 64px;
$barcode-2x-height: 64px;
$barcode-2x-total-width: 232px;
$barcode-2x-total-height: 140px;
$barcode-2x-image: '../images/sprite-out/spritesheet-2x.png';
$barcode-2x: (0px, 76px, 0px, -76px, 64px, 64px, 232px, 140px, '../images/sprite-out/spritesheet-2x.png', 'barcode-2x', );
$envelop-2x-name: 'envelop-2x';
$envelop-2x-x: 76px;
$envelop-2x-y: 76px;
$envelop-2x-offset-x: -76px;
$envelop-2x-offset-y: -76px;
$envelop-2x-width: 64px;
$envelop-2x-height: 64px;
$envelop-2x-total-width: 232px;
$envelop-2x-total-height: 140px;
$envelop-2x-image: '../images/sprite-out/spritesheet-2x.png';
$envelop-2x: (76px, 76px, -76px, -76px, 64px, 64px, 232px, 140px, '../images/sprite-out/spritesheet-2x.png', 'envelop-2x', );
$file-play-2x-name: 'file-play-2x';
$file-play-2x-x: 168px;
$file-play-2x-y: 0px;
$file-play-2x-offset-x: -168px;
$file-play-2x-offset-y: 0px;
$file-play-2x-width: 64px;
$file-play-2x-height: 64px;
$file-play-2x-total-width: 232px;
$file-play-2x-total-height: 140px;
$file-play-2x-image: '../images/sprite-out/spritesheet-2x.png';
$file-play-2x: (168px, 0px, -168px, 0px, 64px, 64px, 232px, 140px, '../images/sprite-out/spritesheet-2x.png', 'file-play-2x', );
$price-tags-2x-name: 'price-tags-2x';
$price-tags-2x-x: 0px;
$price-tags-2x-y: 0px;
$price-tags-2x-offset-x: 0px;
$price-tags-2x-offset-y: 0px;
$price-tags-2x-width: 80px;
$price-tags-2x-height: 64px;
$price-tags-2x-total-width: 232px;
$price-tags-2x-total-height: 140px;
$price-tags-2x-image: '../images/sprite-out/spritesheet-2x.png';
$price-tags-2x: (0px, 0px, 0px, 0px, 80px, 64px, 232px, 140px, '../images/sprite-out/spritesheet-2x.png', 'price-tags-2x', );
$spritesheet-width: 116px;
$spritesheet-height: 70px;
$spritesheet-image: '../images/sprite-out/spritesheet.png';
$spritesheet-sprites: ($address-book, $barcode, $envelop, $file-play, $price-tags, );
$spritesheet: (116px, 70px, '../images/sprite-out/spritesheet.png', $spritesheet-sprites, );
$retina-spritesheet-width: 232px;
$retina-spritesheet-height: 140px;
$retina-spritesheet-image: '../images/sprite-out/spritesheet-2x.png';
$retina-spritesheet-sprites: ($address-book-2x, $barcode-2x, $envelop-2x, $file-play-2x, $price-tags-2x, );
$retina-spritesheet: (232px, 140px, '../images/sprite-out/spritesheet-2x.png', $retina-spritesheet-sprites, );

// These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.
//
// The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
$address-book-group-name: 'address-book';
$address-book-group: ('address-book', $address-book, $address-book-2x, );
$barcode-group-name: 'barcode';
$barcode-group: ('barcode', $barcode, $barcode-2x, );
$envelop-group-name: 'envelop';
$envelop-group: ('envelop', $envelop, $envelop-2x, );
$file-play-group-name: 'file-play';
$file-play-group: ('file-play', $file-play, $file-play-2x, );
$price-tags-group-name: 'price-tags';
$price-tags-group: ('price-tags', $price-tags, $price-tags-2x, );
$retina-groups: ($address-book-group, $barcode-group, $envelop-group, $file-play-group, $price-tags-group, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
//   It should be used with a "retina group" variable.
//
// The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/
//
// $icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );
//
// .icon-home {
//   @include retina-sprite($icon-home-group);
// }
@mixin sprite-background-size($sprite) {
  $sprite-total-width: nth($sprite, 7);
  $sprite-total-height: nth($sprite, 8);
  background-size: $sprite-total-width $sprite-total-height;
}

@mixin retina-sprite($retina-group) {
  $normal-sprite: nth($retina-group, 2);
  $retina-sprite: nth($retina-group, 3);
  @include sprite($normal-sprite);

  @media (-webkit-min-device-pixel-ratio: 2),
         (min-resolution: 192dpi) {
    @include sprite-image($retina-sprite);
    @include sprite-background-size($normal-sprite);
  }
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}

// The `retina-sprites` mixin generates a CSS rule and media query for retina groups
//   This yields the same output as CSS retina template but can be overridden in SCSS
//
// @include retina-sprites($retina-groups);
@mixin retina-sprites($retina-groups) {
  @each $retina-group in $retina-groups {
    $sprite-name: nth($retina-group, 1);
    .#{$sprite-name} {
      @include retina-sprite($retina-group);
    }
  }
}
